import React, { useState, useEffect } from 'react';

export default function Dialog({ data, numberOfChatMessages, tapToRead = () => {} }) {
  const [messageText, setMessageText] = useState('');
  useEffect(() => {
    setMessageText(data?.text);
  }, [data]);
  const [readColor, setReadColor] = useState(data?.chatCharacter?.msgColor);
  const [borderColor, setBorderColor] = useState('#212d40');

  const triggerAltText = (altText, mainText) => {
    if (messageText === mainText) {
      setMessageText(altText);
      setReadColor('#212d40');
      setBorderColor(data?.chatCharacter?.msgColor);
    } else {
      setMessageText(mainText);
      setReadColor(data?.chatCharacter?.msgColor);
      setBorderColor('#212d40');
    }
  };
  return (
    <div
      className={
        data?.chatCharacter?.isMainXter
          ? 'w-full flex flex-col mt-7 mb-0 items-end'
          : 'w-full flex flex-col mt-7 mb-0 items-start'
      }
    >
      <div
        className='flex items-center'
        style={{ maxWidth: '320px' }}
        onClick={() => tapToRead(numberOfChatMessages)}
      >
        <div
          className={`w-12/12 py-3 px-5 rounded-3xl bg-purple-100 relative cursor-pointer ${
            data?.chatCharacter?.isMainXter ? 'rounded-br-none' : 'rounded-bl-none'
          }`}
          style={{
            backgroundColor: `${data?.chatCharacter?.msgColor}`,
            color: 'rgb(163, 20, 0)',
          }}
        >
          <p className='text-base mb-2 font-bold'>{data?.chatCharacter?.name}</p>
          <p className='text-lg text-gray-700 flex items-start'>
            <span className='ml-1'>{messageText}</span>
          </p>
          {data.image && (
            <img src={data.image} className='my-3 h-52 w-52 object-cover' alt='image' />
          )}
        </div>
      </div>

      {data?.altText && (
        <svg
          width={40}
          height={40}
          viewBox='0 0 40 40'
          fill='none'
          xmlns='http://www.w3.org/2000/svg'
          className='-mt-4 -mr-1 -mb-4 -ml-1 z-10 cursor-pointer'
          onClick={() => triggerAltText(data?.altText, data?.text)}
        >
          <g filter='url(#filter0_b_6250:15123)'>
            <circle cx={20} cy={20} r={20} fill={borderColor} fillOpacity='0.4' />
          </g>
          <circle cx={20} cy={20} r={18} fill={readColor} />
          <path
            d='M26.0539 16.1987H23.5869V15.8699C23.5869 15.723 23.5281 15.582 23.4234 15.4781C23.3188 15.3742 23.1768 15.3158 23.0288 15.3158C22.8807 15.3158 22.7388 15.3742 22.6341 15.4781C22.5294 15.582 22.4706 15.723 22.4706 15.8699V16.1987H21.6744C21.5263 16.1987 21.3844 16.2571 21.2797 16.361C21.175 16.4649 21.1162 16.6059 21.1162 16.7528C21.1162 16.8998 21.175 17.0407 21.2797 17.1447C21.3844 17.2486 21.5263 17.307 21.6744 17.307H24.093C24.0113 18.4227 23.5939 19.4884 22.8948 20.3658C22.8459 20.4217 22.8087 20.4869 22.7855 20.5573C22.7624 20.6278 22.7537 20.7022 22.76 20.776C22.7663 20.8499 22.7875 20.9217 22.8223 20.9873C22.8571 21.0529 22.9048 21.1109 22.9625 21.1579C23.0203 21.2048 23.087 21.2398 23.1586 21.2607C23.2302 21.2817 23.3053 21.2881 23.3795 21.2797C23.4537 21.2713 23.5254 21.2482 23.5904 21.2118C23.6555 21.1754 23.7125 21.1263 23.7581 21.0677C24.6196 19.9919 25.1263 18.6788 25.2092 17.307H26.0427C26.116 17.3077 26.1887 17.2941 26.2567 17.2669C26.3247 17.2397 26.3867 17.1995 26.439 17.1486C26.4914 17.0976 26.5331 17.037 26.5618 16.97C26.5906 16.9031 26.6057 16.8311 26.6064 16.7584C26.6072 16.6856 26.5935 16.6134 26.5661 16.5459C26.5387 16.4784 26.4982 16.4169 26.4469 16.3649C26.3956 16.313 26.3345 16.2715 26.2671 16.243C26.1996 16.2145 26.1272 16.1994 26.0539 16.1987Z'
            fill={borderColor}
          />
          <path
            d='M25.8119 21.8473C25.2073 21.8473 24.6137 21.6866 24.0928 21.3818C23.9663 21.314 23.8183 21.2973 23.6796 21.3351C23.541 21.373 23.4224 21.4625 23.3486 21.585C22.8351 22.5862 25.1868 22.9703 25.8305 22.9556C25.9785 22.9531 26.1195 22.8924 26.2224 22.7867C26.3253 22.6811 26.3818 22.5392 26.3793 22.3922C26.3768 22.2452 26.3157 22.1053 26.2093 22.0031C26.1028 21.9009 25.9599 21.8449 25.8119 21.8473Z'
            fill={borderColor}
          />
          <path
            fillRule='evenodd'
            clipRule='evenodd'
            d='M19.3228 13.5428H26.6977C27.0244 13.5286 27.3438 13.6421 27.5873 13.8589C27.8307 14.0758 27.9789 14.3787 28 14.7028V25.9183C27.9827 26.245 27.8361 26.5517 27.5922 26.7716C27.3484 26.9916 27.0269 27.1071 26.6977 27.0931H20.1786C20.0378 27.09 19.9031 27.0356 19.8001 26.9402C19.6972 26.8448 19.6332 26.7151 19.6205 26.5759L19.4828 24.7288H13.3023C12.9756 24.743 12.6562 24.6295 12.4127 24.4126C12.1693 24.1958 12.0211 23.8929 12 23.5688V12.368C12.0173 12.0414 12.1639 11.7347 12.4078 11.5147C12.6516 11.2947 12.9731 11.1792 13.3023 11.1933H17.9684C18.0779 11.1955 18.1847 11.2274 18.2772 11.2856C18.3677 11.3482 18.4396 11.4337 18.4856 11.5332L19.3228 13.5428ZM21.7823 25.97H26.6977C26.7327 25.9735 26.7681 25.9682 26.8006 25.9546C26.8331 25.9411 26.8616 25.9197 26.8837 25.8924V14.7175C26.8592 14.6941 26.8299 14.676 26.7979 14.6646C26.7658 14.6531 26.7317 14.6485 26.6977 14.651H19.7879L23.6614 23.9567C23.673 23.9869 23.6829 24.0177 23.6912 24.049C23.7116 24.1365 23.7116 24.2275 23.6912 24.315V24.3667C23.6873 24.3824 23.681 24.3973 23.6726 24.4111C23.6651 24.4295 23.6465 24.4628 23.6465 24.4628C23.6379 24.4784 23.6279 24.4932 23.6167 24.5071L23.5795 24.5478C23.5678 24.5631 23.5541 24.5768 23.5386 24.5884C23.5082 24.6185 22.8443 25.138 22.3414 25.5314C22.0432 25.7646 21.8017 25.9535 21.7823 25.97ZM17.7461 20.0962C17.9232 20.7063 18.1315 21.0114 18.3711 21.0114C18.4753 21.0114 18.5677 20.9739 18.6484 20.8989C18.7292 20.824 18.7695 20.7309 18.7695 20.6197C18.7695 20.5499 18.7318 20.4103 18.6562 20.2009L18.4336 19.5881L17.8516 16.8928L17.6055 15.5897C17.5299 15.3053 17.3893 15.1631 17.1836 15.1631C17.0326 15.1631 16.6484 15.6531 16.0312 16.633C15.5781 17.3517 15.2031 17.9877 14.9062 18.541C14.651 18.6005 14.5234 18.7349 14.5234 18.9444C14.5234 19.0323 14.5456 19.1098 14.5898 19.177C14.1966 19.9966 14 20.4685 14 20.5926C14 20.7037 14.0404 20.7968 14.1211 20.8718C14.2044 20.9468 14.2982 20.9843 14.4023 20.9843C14.5456 20.9843 14.6589 20.9119 14.7422 20.7671C15.0573 20.1156 15.2799 19.6204 15.4102 19.2818L16.4492 19.0685C16.8789 18.9754 17.2266 18.9107 17.4922 18.8745C17.5938 19.4563 17.6784 19.8635 17.7461 20.0962ZM15.875 18.3665L16.9922 16.5787L17.3086 18.0756C16.668 18.1894 16.1901 18.2864 15.875 18.3665Z'
            fill={borderColor}
          />
          <defs>
            <filter
              id='filter0_b_6250:15123'
              x={-40}
              y={-40}
              width={120}
              height={120}
              filterUnits='userSpaceOnUse'
              colorInterpolationFilters='sRGB'
            >
              <feFlood floodOpacity={0} result='BackgroundImageFix' />
              <feGaussianBlur in='BackgroundImage' stdDeviation={20} />
              <feComposite
                in2='SourceAlpha'
                operator='in'
                result='effect1_backgroundBlur_6250:15123'
              />
              <feBlend
                mode='normal'
                in='SourceGraphic'
                in2='effect1_backgroundBlur_6250:15123'
                result='shape'
              />
            </filter>
          </defs>
        </svg>
      )}
    </div>
  );
}
